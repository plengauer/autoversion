name: 'autoversion'
description: 'automatically bump versions'
inputs:
  github_token:
    description: 'API Token for Github'
    required: true
  openai_token:
    description: 'API Token for OpenAI'
    required: false
  path_include:
    description: 'Consider only changes from this path'
    required: false
    default: './'
  path_exclude:
    description: 'Exclude all changes from this path'
    required: false
    default: './.github/'
runs:
  using: "composite"
  steps:
    - name: "Install Dependencies"
      env:
        OPENAI_TOKEN: ${{ inputs.openai_token }}
      shell: bash
      run: |
        [ -z "$OPENAI_TOKEN" ] && exit 0 || true
        sudo apt-get update
        sudo apt-get install -y debconf-utils wget jq
        echo openai openai/OPENAI_API_TOKEN string "$OPENAI_TOKEN" | sudo debconf-set-selections
        wget -O - https://raw.githubusercontent.com/plengauer/openai/main/INSTALL.sh | sh
    - name: "Checkout"
      uses: actions/checkout@v4.2.2
      with:
        token: ${{ inputs.github_token }}
        fetch-depth: 0
    - name: "Search and Bump Versions"
      id: bump
      env:
        PATH_INCLUDE: ${{ inputs.path_include }}
        PATH_EXCLUDE: ${{ inputs.path_exclude }}
      shell: bash
      run: |
        list_version_files() {
          find . | grep -E '/VERSION$|/DEBIAN/control$|/package.json$|.toml$|.gemspec$'
        }

        is_version_touched() {
          local version_file="$1"
          local commit_id="$2"
          git diff "$commit_id"^ "$commit_id" -- "${version_file#./}" | { grep -E '^\+' || true; } | case "$version_file" in
            */VERSION) echo dirty;;
            */DEBIAN/control) grep -q 'Version: ' && echo dirty;;
            */package.json) grep -q '"version":' && echo dirty;;
            *.gemspec) grep -q '.version' && echo dirty;;
            *.toml) grep -q 'version' && echo dirty;;
            *) echo "Here be dragons! (version file $version_file)" >&2;;
          esac | grep -q dirty
        }
        
        read_version() {
          local version_file="$1"
          cat "$version_file" | case "$version_file" in
            */VERSION) cat;;
            */DEBIAN/control) grep -E '^Version: ' | cut -d ' ' -f 2-;;
            */package.json) jq -r .version;;
            *.gemspec) grep version | cut -d = -f 2 | awk '{ print $1 }' | tr -d "'"'"';;
            *.toml) grep version | cut -d = -f 2 | awk '{ print $1 }' | tr -d "'"'"';;
            *) echo "Here be dragons! (version file $version_file)" >&2; cat;;
          esac
        }
        
        write_version() {
          local version_file="$1"
          local version_string="$2"
          local version_string_new="$3"
          case "$version_file" in
            */VERSION) echo -n "$version_string_new" > "$version_file";;
            */DEBIAN/control) sed -i "s/^Version: .*/Version: $version_string_new/" "$version_file";;
            */package.json) jq --arg version "$version_string_new" '.version = $version' "$version_file" > tmp.$$.json && rm "$version_file" && mv tmp.$$.json "$version_file";;
            *.gemspec) sed -i "s/$version_string/$version_string_new/g" "$version_file";;
            *.toml) sed -i "s/$version_string/$version_string_new/g" "$version_file";;
            *) echo "Here be dragons! (version file $version_file)" >&2; return 1;;
          esac
        }

        increment_version() {
          local version_string="$1"
          local change_type="$2"
          major="$(echo "$version_string" | cut -d . -f 1)"
          minor="$(echo "$version_string" | cut -d . -f 2)"
          patch="$(echo "$version_string" | cut -d . -f 3)"
          if [ "$major.$minor.$patch" != "$version_string" ]; then echo "Version format not supported! ($version_string)" >&2; return 1; fi
          case "$change_type" in
            major) major="$((major + 1))"; minor=0; patch=0;;
            minor) minor="$((minor + 1))"; patch=0;;
            patch) patch="$((patch + 1))";;
            *) echo "Here be dragons! (change type $change_type)" >&2; return 1;;
          esac
          echo "$major.$minor.$patch"
        }

        commits2bumps() {
          if [ -n "${{ inputs.openai_token }}" ]; then
            xargs -r -0 -d '\n' -n 1 ai
          else
            while read -r commit_message; do
              case "$(printf '%s' "$commit_message" | tr '[:upper:]' '[:lower:]')" in
                '[bugfix]'*) echo patch;;
                '[bug]'*) echo patch;;
                '[minor]'*) echo minor;;
                '[major]'*) echo major;;
                '[breaking]'*) echo major;;
                '[breaking change]'*) echo major;;
                *bug*) echo patch;;
                *minor*) echo minor;;
                *major*) echo major;;
                *'breaking change'*) echo major;;
                *dependency*) echo minor;;
                *update*) echo minor;;
                *) echo minor;;
              esac
            done
          fi
        }

        set +e
        set +o pipefail
        export AI_SYSTEM_PROMPT="
        You take input that are commit messages and analyze whether the maximum change is either major, minor or patch.
        Major changes are for breaking changes, minor for new features, enhancements and optimizations, dependency updates, and other new functionality that does not break existing functionality, patch is for bug fixes only. Refactors do not need a version change.
        If the commit messages hint at more than one type of a change, you respond with the highest one. You only respond with major, minor, patch, or none if nothing at all need changing.

        The name of the repository is $GITHUB_REPOSITORY."
        if [ -r README.md ]; then
          export AI_SYSTEM_PROMPT="$AI_SYSTEM_PROMPT
          The content of the README.md is:
          $(cat README.md)
        "
        fi
        commit_messages="$(mktemp)"
        list_version_files | while read -r version_file; do
          echo "processing $version_file ..." >&2
          if [ -z "$(increment_version "$(read_version "$version_file")" patch)" ]; then continue; fi
          directory="$(echo "$version_file" | rev | cut -d '/' -f 2- | rev)"/
          case "$version_file" in
            */DEBIAN/control) directory="$(echo "$directory" | rev | cut -d '/' -f 3- | rev)"/;;
            */package.json) if jq '.version' "$version_file" | grep -q null; then continue; fi;;
            *) true;;
          esac
          git log --oneline | cut -d ' ' -f 1 | while read -r commit_id; do
            if ! git diff-tree --no-commit-id --name-only -r "$commit_id" | grep -qE '^'"${directory#./}"; then continue; fi
            if git diff-tree --no-commit-id --name-only -r "$commit_id" | grep -qF "${version_file#./}" && is_version_touched "$version_file" "$commit_id"; then echo "stopping at $commit_id" >&2; break; fi
            if [ -n "$PATH_INCLUDE" ]; then
              include=0
              IFS=:
              for path_include in $PATH_INCLUDE; do
                if git diff-tree --no-commit-id --name-only -r "$commit_id" | grep -qE '^'"${path_include#./}"; then include=1; fi
              done
              IFS=' '
              if [ "$include" = 0 ]; then continue; fi
            fi
            if [ -n "$PATH_EXCLUDE" ]; then
              skip=0
              IFS=:
              for path_exclude in $PATH_EXCLUDE; do
                if git diff-tree --no-commit-id --name-only -r "$commit_id" | grep -qE '^'"${path_exclude#./}"; then skip=1; fi
              done
              IFS=' '
              if [ "$skip" = 1 ]; then continue; fi
            fi
            echo "including $commit_id" >&2
            echo "$commit_id"
          done | tee "$commit_messages" | while read -r commit_id; do git log -1 --format=%B "$commit_id" | tr '\n' ' '; echo; done | grep -vE '^$' | tee /dev/stderr | commits2bumps | sort -u -r | while read -r change_type; do
            if [ "$change_type" = none ]; then continue; fi
            echo "bumping $change_type version in $version_file" >&2
            version_string="$(read_version "$version_file" || true)"
            if [ -z "$version_string" ]; then break; fi
            version_string_new="$(increment_version "$version_string" "$change_type" || true)"
            if [ -z "$version_string_new" ]; then break; fi
            write_version "$version_file" "$version_string" "$version_string_new" || true
          done
        done
        echo "commit_messages=$(cat "$commit_messages" | tr '\n' ' ')" >> "$GITHUB_OUTPUT"
    - name: Log Changes
      shell: bash
      run: git status && git diff
    - name: "Resolve Reviewers"
      id: reviewers
      shell: bash
      run: |
        if ! [ -f .github/renovate.json ]; then exit 0; fi
        echo "reviewers=$(cat .github/renovate.json | jq '.reviewers // empty' | jq -s | jq -r '.[] | join(",")')" >> "$GITHUB_OUTPUT"
    - name: "Open Pull Request"
      id: open-pr
      uses: peter-evans/create-pull-request@v7.0.8
      with:
        token: ${{ inputs.github_token }}
        commit-message: "Bump Version"
        branch: "versionbump"
        title: "Automatic Version Bump"
        body: |
          This PR bumps version(s) to trigger a release. It is based on the following commits: ${{ steps.bump.outputs.commit_messages }}
          (this PR is automatically generated)
        reviewers: ${{ steps.reviewers.outputs.reviewers }}
        delete-branch: true
    - name: "Delay" # to let the api and PR state catch up ...
      shell: bash
      run: sleep 60
    - uses: peter-evans/enable-pull-request-automerge@v3.0.0
      if: steps.open-pr.outputs.pull-request-number != null
      with:
        token: ${{ inputs.github_token }}
        pull-request-number: ${{ steps.open-pr.outputs.pull-request-number }}
        merge-method: squash
